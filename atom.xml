<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梦鱼乡</title>
  
  
  <link href="https://imaginefish.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://imaginefish.github.io/blog/"/>
  <updated>2022-09-08T11:15:13.435Z</updated>
  <id>https://imaginefish.github.io/blog/</id>
  
  <author>
    <name>梦鱼</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hadoop 文件系统</title>
    <link href="https://imaginefish.github.io/blog/2022/09/08/Hadoop%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>https://imaginefish.github.io/blog/2022/09/08/Hadoop%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-09-08T10:23:59.000Z</published>
    <updated>2022-09-08T11:15:13.435Z</updated>
    
    <content type="html"><![CDATA[<p>Hadoop 有一个抽象的文件系统概念。Java 抽象类 <code>org.apache.hadoop.fs.FileSystem</code> 定义了 Hadoop 中一个文件系统的客户端接口，并且该抽象类有几个具体实现，其中常用的如下表：</p><table><thead><tr><th align="center">文件系统</th><th align="center">URI 方案</th><th align="center">Java 实现</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Local</td><td align="center">file:&#x2F;&#x2F;&#x2F;path</td><td align="center">fs.LocalFileSystem</td><td align="center">使用客户端检验和的本地磁盘文件系统。使用 <code>RawLocalFileSystem</code> 表示无校验和的本地磁盘文件系统。</td></tr><tr><td align="center">HDFS</td><td align="center">hdfs:&#x2F;&#x2F;host&#x2F;path</td><td align="center">hdfs.DistributedFileSystem</td><td align="center">Hadoop 的分布式文件系统</td></tr><tr><td align="center">FTP</td><td align="center"><a href="ftp://host/path">ftp://host/path</a></td><td align="center">fs.ftp.FTPFileSystem</td><td align="center">由 FTP 服务器支持的文件系统</td></tr><tr><td align="center">SFTP</td><td align="center">s<a href="ftp://host/path">ftp://host/path</a></td><td align="center">fs.sftp.SFTPFileSystem</td><td align="center">由 SFTP 服务器支持的文件系统</td></tr><tr><td align="center">其中 <code>Local</code> 文件系统的 URI 方案比较特殊，冒号后有三个斜杠 (<code>///</code>)。这是因为 URL 标准规定 file URL 采用 <code>file://&lt;host&gt;/&lt;path&gt;</code> 形式。作为一个特例，当主机是本机时，<host> 是空字符串。因此，本地 file URL 通常具有三个斜杠。</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><span id="more"></span><h2 id="从-Hadoop-URL-读取数据"><a href="#从-Hadoop-URL-读取数据" class="headerlink" title="从 Hadoop URL 读取数据"></a>从 Hadoop URL 读取数据</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;Hadoop 有一个抽象的文件系统概念。Java 抽象类 &lt;code&gt;org.apache.hadoop.fs.FileSystem&lt;/code&gt; 定义了 Hadoop 中一个文件系统的客户端接口，并且该抽象类有几个具体实现，其中常用的如下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;文件系统&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;URI 方案&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Java 实现&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Local&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;file:&amp;#x2F;&amp;#x2F;&amp;#x2F;path&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;fs.LocalFileSystem&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;使用客户端检验和的本地磁盘文件系统。使用 &lt;code&gt;RawLocalFileSystem&lt;/code&gt; 表示无校验和的本地磁盘文件系统。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;HDFS&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;hdfs:&amp;#x2F;&amp;#x2F;host&amp;#x2F;path&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;hdfs.DistributedFileSystem&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Hadoop 的分布式文件系统&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;FTP&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;ftp://host/path&quot;&gt;ftp://host/path&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;fs.ftp.FTPFileSystem&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;由 FTP 服务器支持的文件系统&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;SFTP&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;s&lt;a href=&quot;ftp://host/path&quot;&gt;ftp://host/path&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;fs.sftp.SFTPFileSystem&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;由 SFTP 服务器支持的文件系统&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;其中 &lt;code&gt;Local&lt;/code&gt; 文件系统的 URI 方案比较特殊，冒号后有三个斜杠 (&lt;code&gt;///&lt;/code&gt;)。这是因为 URL 标准规定 file URL 采用 &lt;code&gt;file://&amp;lt;host&amp;gt;/&amp;lt;path&amp;gt;&lt;/code&gt; 形式。作为一个特例，当主机是本机时，&lt;host&gt; 是空字符串。因此，本地 file URL 通常具有三个斜杠。&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://imaginefish.github.io/blog/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Hadoop" scheme="https://imaginefish.github.io/blog/tags/Hadoop/"/>
    
    <category term="HDFS" scheme="https://imaginefish.github.io/blog/tags/HDFS/"/>
    
  </entry>
  
  <entry>
    <title>Spark 之自定义输出格式写入文件</title>
    <link href="https://imaginefish.github.io/blog/2022/09/08/Spark%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6/"/>
    <id>https://imaginefish.github.io/blog/2022/09/08/Spark%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6/</id>
    <published>2022-09-08T10:17:00.000Z</published>
    <updated>2022-09-09T02:22:40.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spark-常用的保存文件方式"><a href="#Spark-常用的保存文件方式" class="headerlink" title="Spark 常用的保存文件方式"></a>Spark 常用的保存文件方式</h2><p>Spark 文件系统由 FS.FileSystem指定</p><ol><li>RDD 保存至文本文件<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala">rdd.saveAsTextFile(<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure></li><li>RDD 指定<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala">rdd.saveHadoopFile(<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Spark-常用的保存文件方式&quot;&gt;&lt;a href=&quot;#Spark-常用的保存文件方式&quot; class=&quot;headerlink&quot; title=&quot;Spark 常用的保存文件方式&quot;&gt;&lt;/a&gt;Spark 常用的保存文件方式&lt;/h2&gt;&lt;p&gt;Spark 文件系统由 FS.Fil</summary>
      
    
    
    
    <category term="大数据" scheme="https://imaginefish.github.io/blog/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Spark" scheme="https://imaginefish.github.io/blog/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>Spark 之 RDD、DF、DS 创建与转换</title>
    <link href="https://imaginefish.github.io/blog/2022/09/08/Spark%E4%B9%8BRDD%E3%80%81DF%E3%80%81DS%E5%88%9B%E5%BB%BA%E4%B8%8E%E8%BD%AC%E6%8D%A2/"/>
    <id>https://imaginefish.github.io/blog/2022/09/08/Spark%E4%B9%8BRDD%E3%80%81DF%E3%80%81DS%E5%88%9B%E5%BB%BA%E4%B8%8E%E8%BD%AC%E6%8D%A2/</id>
    <published>2022-09-08T09:17:48.000Z</published>
    <updated>2022-09-08T10:15:42.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RDD"><a href="#RDD" class="headerlink" title="RDD"></a>RDD</h2><h2 id="DF"><a href="#DF" class="headerlink" title="DF"></a>DF</h2><h2 id="DS"><a href="#DS" class="headerlink" title="DS"></a>DS</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;RDD&quot;&gt;&lt;a href=&quot;#RDD&quot; class=&quot;headerlink&quot; title=&quot;RDD&quot;&gt;&lt;/a&gt;RDD&lt;/h2&gt;&lt;h2 id=&quot;DF&quot;&gt;&lt;a href=&quot;#DF&quot; class=&quot;headerlink&quot; title=&quot;DF&quot;&gt;&lt;/a&gt;DF&lt;/h2&gt;&lt;h</summary>
      
    
    
    
    <category term="大数据" scheme="https://imaginefish.github.io/blog/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Spark" scheme="https://imaginefish.github.io/blog/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>Git 学习记录</title>
    <link href="https://imaginefish.github.io/blog/2022/09/06/Git%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>https://imaginefish.github.io/blog/2022/09/06/Git%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2022-09-06T01:26:12.000Z</published>
    <updated>2022-09-08T10:27:18.458Z</updated>
    
    <content type="html"><![CDATA[<p>Git 是目前世界上最先进、最流行的分布式版本控制系统。Git 采用 C 语言开发，并完全免费开源，由 <a href="https://zh.wikipedia.org/wiki/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9">Linus Torvalds</a> 发起，并作为主要开发者。他同时还是 Linux 内核的最早作者，担任 Linux 内核的首要架构师与项目协调者。</p><span id="more"></span><h2 id="配置用户"><a href="#配置用户" class="headerlink" title="配置用户"></a>配置用户</h2><p>安装完 Git 后一般要配置用户名和邮箱，以便在每次提交中记录下来，方便查找每次提交的用户。Git 的配置一共有三个级别：system（系统级）、global（用户级）、local（版本库）。system 的配置整个系统只有一个，global 的配置每个账号只有一个，local 的配置存在于 Git 版本库中，可以对不同的版本库配置不同的 local 信息。这三个级别的配置是逐层覆盖的关系，当用户提交修改时，首先查找 system 配置，其次查找 global 配置，最后查找 local 配置，逐层查找的过程中，若查询到配置信息，则会覆盖上一层配置，记录在提交记录中。<br>当有多个账号信息时，为了区分不同账户提交的记录。可以配置 global 为常用的用户和邮箱信息。对于不常用的，可以在对应的版本库里配置单独的用户和邮箱信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;username&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;email address&quot;</span><br></code></pre></td></tr></table></figure><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><ol><li>新建一个空文件夹，并切换至目录下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> test_git<br><span class="hljs-built_in">cd</span> test_git<br></code></pre></td></tr></table></figure></li><li>初始化版本库，此后该目录下的所有文件都将被 Git 管理<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure></li></ol><h2 id="添加并提交文件到版本库"><a href="#添加并提交文件到版本库" class="headerlink" title="添加并提交文件到版本库"></a>添加并提交文件到版本库</h2><p>新建&#x2F;修改&#x2F;删除文件的行为都可以被 Git 管理。</p><ol><li>对文件进行了以上操作后，将所有的文件变动添加至 Git 暂存区，用于后续提交到版本库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br></code></pre></td></tr></table></figure></li><li>提交到版本库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&#x27;提交信息&#x27;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><h3 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h3><h4 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h4><p>工作区是指用户新建的可见目录，其下存放着用户自己创建和修改的工作文件。</p><h4 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h4><p>版本库就是使用 <code>git init</code> 创建出 <code>.git</code> 隐藏目录，称为 Git 版本库。<br>Git 的版本库里存了很多东西，其中最重要的就是称为 stage（或者叫 index）的<strong>暂存区</strong>，还有 Git 为我们自动创建的第一个分支 master，以及指向 master 的一个指针叫 HEAD。<br>当用户完成文件修改后，使用 <code>git add</code> 命令就可以将文件变动添加至 Git 暂存区，如果用户发现不想添加本次修改，可以使用 <code>git checkout --&lt;file&gt;</code> 撤销指定文件的添加。此时还没有生成新的版本库，如果确认添加无误，使用 <code>git commit</code> 提交本次所有修改，生成新的版本库，并且清空所有暂存区的文件变动。<code>git status</code> 可以时刻观察当前仓库的状态，<code>git log</code> 可以查看每次 <code>commit</code> 的相关信息。提交后，用 <code>git diff HEAD -- &lt;file&gt;</code> 命令可以查看工作区和版本库里面最新版本的区别。</p><p><img src="/blog/img/git_1.png" alt="Git 概念图"></p><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p>把文件在工作区的修改全部撤销，让这个文件回到最近一次 <code>git commit</code> 或 <code>git add</code> 时的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -- &lt;file&gt;<br></code></pre></td></tr></table></figure><p>在 <code>git add</code>后，把暂存区的修改撤销掉（unstage），重新放回工作区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset HEAD &lt;file&gt;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>场景 1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 <code>git checkout -- &lt;file&gt;</code>。</li><li>场景 2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 <code>git reset HEAD &lt;file&gt;</code>，就回到了场景 1，第二步按场景 1 操作。</li></ul><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>当删除工作区的文件时，工作区和版本库的文件就不一致了，<code>git status</code> 命令会立刻告诉你哪些文件被删除了。<br>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令 <code>git rm</code> 删掉，并且 <code>git commit</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">rm</span> &lt;file&gt;<br>git commit -m <span class="hljs-string">&quot;remove file&quot;</span><br></code></pre></td></tr></table></figure><p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -- &lt;file&gt;<br></code></pre></td></tr></table></figure><p><code>git checkout</code> 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><h3 id="版本退回"><a href="#版本退回" class="headerlink" title="版本退回"></a>版本退回</h3><p>退回到上个版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --hard HEAD^<br></code></pre></td></tr></table></figure><p>退回到指定版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看版本号</span><br>git <span class="hljs-built_in">log</span><br><span class="hljs-comment"># 退回到指定版本</span><br>git reset --hard &lt;commit <span class="hljs-built_in">id</span>&gt;<br></code></pre></td></tr></table></figure><p>当找不到目标 <code>commit id</code> 时，Git 提供了一个命令 <code>git reflog</code> 用来记录你的每一次命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reflog<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>HEAD 指向的版本就是当前版本，因此，Git 允许我们在版本的历史之间穿梭，使用命令 <code>git reset --hard &lt;commit id&gt;</code>。</li><li>穿梭前，用 <code>git log</code> 可以查看提交历史，以便确定要回退到哪个版本。</li><li>要重返未来，用 <code>git reflog</code> 查看命令历史，以便确定要回到未来的哪个版本。</li></ul><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h3><p>以 GitHub 为例，创建一个空的 GitHub 仓库，然后将此仓库添加至本地远程库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin git@github.com:imaginefish/blog.git<br></code></pre></td></tr></table></figure><p>这里远程库的名字就是 <code>origin</code>，这是 Git 默认的叫法，也可以改成别的。</p><h3 id="推送本地库到远程库"><a href="#推送本地库到远程库" class="headerlink" title="推送本地库到远程库"></a>推送本地库到远程库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git push -u origin main<br></code></pre></td></tr></table></figure><p>以上命令会把本地的 <code>main</code> 分支推送到远程库。</p><p>由于远程库是空的，我们第一次推送 mian 分支时，加上了<code>-u</code> 参数，Git 不但会把本地的 main 分支内容推送的远程新的 mian 分支，还会把本地的 main 分支和远程的 main 分支关联起来，在以后的推送或者拉取时就可以简化命令，之后推送就可以省略 <code>-u</code> 参数。</p><h3 id="查看远程库"><a href="#查看远程库" class="headerlink" title="查看远程库"></a>查看远程库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote -v<br></code></pre></td></tr></table></figure><h3 id="删除远程库"><a href="#删除远程库" class="headerlink" title="删除远程库"></a>删除远程库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote <span class="hljs-built_in">rm</span> origin<br></code></pre></td></tr></table></figure><h3 id="clone-远程库"><a href="#clone-远程库" class="headerlink" title="clone 远程库"></a>clone 远程库</h3><p>Git 支持 <code>ssh</code> 和 <code>https</code> 等协议，<code>ssh</code> 协议速度快，<code>https</code> 速度慢，并且每次推送都必须输入口令，但是出于安全考虑，有些网络环境下没有开放 <code>ssh 22</code> 端口，则只能使用 <code>https</code> 协议。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:imaginefish/blog.git<br></code></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><p>创建分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch main<br></code></pre></td></tr></table></figure><p>切换分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout main<br><span class="hljs-comment"># 新版命令</span><br>git switch main<br></code></pre></td></tr></table></figure><p>创建并切换分支（替代以上两条命令）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b main<br><span class="hljs-comment"># 新版命令</span><br>git switch -c main<br></code></pre></td></tr></table></figure><p>查看当前分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch<br></code></pre></td></tr></table></figure><p>合并指定分支到当前分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git merge &lt;name&gt;<br></code></pre></td></tr></table></figure><p>删除分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -d main<br></code></pre></td></tr></table></figure><h3 id="分支冲突"><a href="#分支冲突" class="headerlink" title="分支冲突"></a>分支冲突</h3><ul><li>当被合并分支的修改内容与当前分支不一致时，合并分支会出现分支冲突。</li><li>当 Git 无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</li><li>解决冲突就是把 Git 合并失败的文件手动编辑为我们希望的内容，再提交。</li><li>用 <code>git log --graph</code> 命令可以看到分支合并图。</li></ul><h3 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h3><ul><li><code>git rebase</code> 操作可以把本地未 push 的分叉提交历史整理成直线。</li><li><code>git rebase</code> 的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li></ul><h2 id="使用-GitHub"><a href="#使用-GitHub" class="headerlink" title="使用 GitHub"></a>使用 GitHub</h2><ul><li>在 GitHub 上，可以自己创建自己的公开和私有仓库</li><li>可以任意 Fork 开源仓库</li><li>自己拥有 Fork 后的仓库的读写权限</li><li>可以推送 pull request 给官方仓库来贡献代码</li></ul><h2 id="搭建-Git-服务器"><a href="#搭建-Git-服务器" class="headerlink" title="搭建 Git 服务器"></a>搭建 Git 服务器</h2><p>一般在公司内部，还会搭建 Git 服务器，托管公司自己的代码，提升访问速度和安全性，防止代码泄露。</p><ol><li>安装 <code>git</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install git<br></code></pre></td></tr></table></figure></li><li>创建 <code>git</code> 用户，用于运行 <code>git</code> 服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo adduser git<br></code></pre></td></tr></table></figure></li><li>创建 ssh 证书登录<br>创建 SSH Key：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail@example.com&quot;</span><br></code></pre></td></tr></table></figure>之后可以在用户主目录里找到 <code>.ssh</code> 目录，里面有 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件，这两个就是 <code>SSH Key</code> 的秘钥对，<code>id_rsa</code> 是私钥，不能泄露出去，<code>id_rsa.pub</code> 是公钥，可以放心地告诉任何人，可以其添加至个人的 GitHub 账户 <code>SSH Keys</code> 中，便能实现本地访问 GitHub 仓库。<br>收集所有需要登录的用户的公钥，把所有公钥导入到 <code>/home/git/.ssh/authorized_keys</code> 文件里，一行一个。</li><li>初始化 Git 仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init --bare test.git<br></code></pre></td></tr></table></figure>Git 就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的 Git 仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的 Git 仓库通常都以 .git 结尾。然后，把 owner 改为 git：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chown</span> -R git:git test.git<br></code></pre></td></tr></table></figure></li><li>禁用 bash 登录<br>出于安全考虑，第二步创建的 git 用户不允许登录 bash，这可以通过编辑 <code>/etc/passwd</code> 文件完成。找到类似下面的一行：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git:x:1001:1001:,,,:/home/git:/bin/bash<br></code></pre></td></tr></table></figure>改为：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git:x:1001:1001:,,,:/home/git:/usr/bin/git-bash<br></code></pre></td></tr></table></figure>这样，git 用户可以正常通过 ssh 使用 git，但无法登录 bash，因为我们为 git 用户指定的 git-bash 每次一登录就自动退出。</li><li>克隆远程仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@server:/xxx/test.git<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Git 是目前世界上最先进、最流行的分布式版本控制系统。Git 采用 C 语言开发，并完全免费开源，由 &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9&quot;&gt;Linus Torvalds&lt;/a&gt; 发起，并作为主要开发者。他同时还是 Linux 内核的最早作者，担任 Linux 内核的首要架构师与项目协调者。&lt;/p&gt;</summary>
    
    
    
    <category term="版本控制" scheme="https://imaginefish.github.io/blog/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
    <category term="Git" scheme="https://imaginefish.github.io/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>本地仓库推送到 GitHub 仓库 main 分支</title>
    <link href="https://imaginefish.github.io/blog/2022/09/05/%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%8E%A8%E9%80%81%E5%88%B0GitHub%E4%BB%93%E5%BA%93main%E5%88%86%E6%94%AF/"/>
    <id>https://imaginefish.github.io/blog/2022/09/05/%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%8E%A8%E9%80%81%E5%88%B0GitHub%E4%BB%93%E5%BA%93main%E5%88%86%E6%94%AF/</id>
    <published>2022-09-05T11:40:24.000Z</published>
    <updated>2022-09-06T01:48:52.320Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>GitHub 目前已经将用户创建的版本库的默认分支从 <code>master</code> 更改为了 <code>main</code>，详情见<a href="https://github.blog/changelog/2020-08-26-set-the-default-branch-for-newly-created-repositories">GitHub Change Blog</a>。而 Git 默认创建的还是 <code>master</code> 分支，所以在本地仓库同步到 GitHub 时，会出现 <code>error: failed to push some refs to &#39;github.com:imaginefish/blog.git&#39;</code> 报错，需要切换至 <code>main</code> 分区后再进行操作。</p></blockquote><span id="more"></span><ol><li>初始化版本库<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init<br></code></pre></td></tr></table></figure></li><li>添加远程仓库<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add origin git@github.com:imaginefish/blog.git<br></code></pre></td></tr></table></figure></li><li>拉取 GitHub 仓库到本地同步<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git pull --rebase origin main<br></code></pre></td></tr></table></figure></li><li>切换本地分支从 <code>master</code> 到 <code>main</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout main<br></code></pre></td></tr></table></figure></li><li>添加所有修改到暂存区<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add .<br></code></pre></td></tr></table></figure></li><li>提交修改到版本库<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -m &#x27;some messages&#x27;<br></code></pre></td></tr></table></figure></li><li>推送到 GitHub 的 <code>main</code> 分支<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin main<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;GitHub 目前已经将用户创建的版本库的默认分支从 &lt;code&gt;master&lt;/code&gt; 更改为了 &lt;code&gt;main&lt;/code&gt;，详情见&lt;a href=&quot;https://github.blog/changelog/2020-08-26-set-the-default-branch-for-newly-created-repositories&quot;&gt;GitHub Change Blog&lt;/a&gt;。而 Git 默认创建的还是 &lt;code&gt;master&lt;/code&gt; 分支，所以在本地仓库同步到 GitHub 时，会出现 &lt;code&gt;error: failed to push some refs to &amp;#39;github.com:imaginefish/blog.git&amp;#39;&lt;/code&gt; 报错，需要切换至 &lt;code&gt;main&lt;/code&gt; 分区后再进行操作。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="版本控制" scheme="https://imaginefish.github.io/blog/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
    <category term="Git" scheme="https://imaginefish.github.io/blog/tags/Git/"/>
    
    <category term="GitHub" scheme="https://imaginefish.github.io/blog/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Windows 下搭建 Spark</title>
    <link href="https://imaginefish.github.io/blog/2022/09/05/Windows%E4%B8%8B%E6%90%AD%E5%BB%BASpark/"/>
    <id>https://imaginefish.github.io/blog/2022/09/05/Windows%E4%B8%8B%E6%90%AD%E5%BB%BASpark/</id>
    <published>2022-09-05T05:49:20.000Z</published>
    <updated>2022-09-09T02:22:25.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h2><p>Spark 部署模式分为本地单机（local）和集群模式，本地单机模式常用于本地开发程序与调试。集群模式又分为 Standalone 模式、Yarn 模式、Mesos 模式<br>通过测试发现，以下版本组合报错信息最少</p><table><thead><tr><th align="center">组件</th><th align="center">版本</th></tr></thead><tbody><tr><td align="center">Spark</td><td align="center">3.2.2</td></tr><tr><td align="center">Hadoop</td><td align="center">3.3.1</td></tr><tr><td align="center">Scala</td><td align="center">2.12.15</td></tr><tr><td align="center">JDK</td><td align="center">1.8</td></tr></tbody></table><span id="more"></span><h2 id="Spark-依赖库"><a href="#Spark-依赖库" class="headerlink" title="Spark 依赖库"></a>Spark 依赖库</h2><p><code>Spark 3.2.2</code> 的依赖库版本如下：</p><table><thead><tr><th align="center">依赖库</th><th align="center">版本</th></tr></thead><tbody><tr><td align="center">Scala</td><td align="center">2.12.15</td></tr><tr><td align="center">Hadoop</td><td align="center">3.3.1</td></tr></tbody></table><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li><a href="https://www.oracle.com/java/technologies/downloads/archive/">下载</a>安装 JDK，配置 <code>JAVA_HOME</code> 环境变量，将 <code>JAVA_HOME/bin</code> 添加至 <code>Path</code> 环境变量中。</li><li><a href="https://www.scala-lang.org/download/all.html">下载</a>安装 Scala，根据具体的操作系统，按照官网推荐的方式安装，无需配置 <code>SCALA_HOME</code> 环境变量。</li><li><a href="https://archive.apache.org/dist/hadoop/common/">下载</a>安装 Hadoop，配置 <code>HADOOP_HOME</code> 环境变量，将 <code>HADOOP_HOME/bin</code> 添加至 <code>Path</code> 环境变量中。若在 Windows 上搭建，则还需要根据具体的 Hadoop 版本<a href="https://github.com/steveloughran/winutils">下载</a>对应的 <code>winutils.exe</code> 和 <code>hadoop.dll</code> 文件，放入 <code>HADOOP_HOME/bin</code> 路径下，以获得在 Windows 上运行 Spark 的支持，避免以下报错信息：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread “main” java.lang.UnsatisfiedLinkError: org.apache.hadoop.io.nativeio.NativeIO$Windows.access0(Ljava/lang/String;I)Z<br></code></pre></td></tr></table></figure></li><li><a href="https://archive.apache.org/dist/spark/">下载</a>安装 Spark，配置 <code>SPARK_HOME</code> 环境变量，将 <code>SPARK_HOME/bin</code> 添加至 <code>Path</code> 环境变量中。进入 Spark 目录下的 conf 子目录下，根据需要修改 <code>log4j.properties</code> 等配置文件。<code>log4j.properties</code> 常见的配置如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 在终端输出 WARN 级别的日志，避免输出过多日志，影响查看<br>log4j.rootCategory=WARN, console<br># 避免 ERROR ShutdownHookManager: Exception while deleting Spark temp dir 报错<br>log4j.logger.org.apache.spark.util.ShutdownHookManager=OFF<br>log4j.logger.org.apache.spark.SparkEnv=ERROR<br></code></pre></td></tr></table></figure></li></ol><h2 id="安装-PySpark"><a href="#安装-PySpark" class="headerlink" title="安装 PySpark"></a>安装 PySpark</h2><p>如果上述安装步骤都已完成，就可以开始使用 Java 或 Scala 开发 Spark 程序了。对于 Python 用户，Spark 也提供了语言支持，只需要在 Spark 安装配置完成后，继续安装 PySpark 就可以使用 Python 开发 Spark 程序了：</p><ul><li>使用 PyPI 安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install pyspark=3.2.2<br></code></pre></td></tr></table></figure></li><li>使用 Conda 安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install -c conda-forge pyspark=3.2.2<br></code></pre></td></tr></table></figure><strong>注意：</strong> PySpark 的版本需要和 Spark 的版本保持一致，想要了解更多安装详情可以参考<a href="https://spark.apache.org/docs/latest/api/python/getting_started/install.html">官方文档</a></li></ul><h3 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h3><ol><li>编码错误<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">UnicodeDecodeError: <span class="hljs-string">&#x27;gbk&#x27;</span> codec can<span class="hljs-string">&#x27;t decode byte 0x82 in position 120: illegal multibyte sequence</span><br></code></pre></td></tr></table></figure>通过配置环境变量解决，Windows 手动配置系统环境变量，Linux 可直接执行以下语句：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PYTHONIOENCODING=utf8<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;版本选择&quot;&gt;&lt;a href=&quot;#版本选择&quot; class=&quot;headerlink&quot; title=&quot;版本选择&quot;&gt;&lt;/a&gt;版本选择&lt;/h2&gt;&lt;p&gt;Spark 部署模式分为本地单机（local）和集群模式，本地单机模式常用于本地开发程序与调试。集群模式又分为 Standalone 模式、Yarn 模式、Mesos 模式&lt;br&gt;通过测试发现，以下版本组合报错信息最少&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;组件&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;版本&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Spark&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;3.2.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Hadoop&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;3.3.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Scala&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2.12.15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;JDK&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1.8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://imaginefish.github.io/blog/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Hadoop" scheme="https://imaginefish.github.io/blog/tags/Hadoop/"/>
    
    <category term="Spark" scheme="https://imaginefish.github.io/blog/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + Icarus + GitHub Pages 搭建个人博客</title>
    <link href="https://imaginefish.github.io/blog/2022/09/02/hexo-icarus-github-pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://imaginefish.github.io/blog/2022/09/02/hexo-icarus-github-pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-09-02T09:27:20.000Z</published>
    <updated>2022-09-06T06:33:27.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><p>需要先安装以下程序：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a><span id="more"></span></li></ul><h3 id="Node-js-版本限制"><a href="#Node-js-版本限制" class="headerlink" title="Node.js 版本限制"></a>Node.js 版本限制</h3><p>强烈建议永远安装最新版本的 Hexo，以及推荐的 Node.js 版本。</p><table><thead><tr><th align="center">Hexo 版本</th><th align="center">最低兼容的 Node.js 版本</th></tr></thead><tbody><tr><td align="center">6.0+</td><td align="center">12.13.0</td></tr><tr><td align="center">5.0+</td><td align="center">10.13.0</td></tr><tr><td align="center">4.1 - 4.2</td><td align="center">8.10</td></tr><tr><td align="center">4.0</td><td align="center">8.6</td></tr><tr><td align="center">3.3 - 3.9</td><td align="center">6.9</td></tr><tr><td align="center">3.2 - 3.3</td><td align="center">0.12</td></tr><tr><td align="center">3.0 - 3.1</td><td align="center">0.10 or iojs</td></tr><tr><td align="center">0.0.1 - 2.8</td><td align="center">0.10</td></tr></tbody></table><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>使用 npm 全局安装 Hexo。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><h2 id="安装-icarus"><a href="#安装-icarus" class="headerlink" title="安装 icarus"></a>安装 icarus</h2><ol><li>指定路径初始化博客目录，并切换至该路径下，以blog路径为例<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init blog<br>cd blog<br></code></pre></td></tr></table></figure></li><li>使用 npm 安装 Hexo。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-theme-icarus<br></code></pre></td></tr></table></figure></li><li>配置 Hexo 主题<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo config theme icarus<br></code></pre></td></tr></table></figure></li></ol><h2 id="创建-GitHub-仓库"><a href="#创建-GitHub-仓库" class="headerlink" title="创建 GitHub 仓库"></a>创建 GitHub 仓库</h2><ol><li>创建 GitHub 仓库，并开启 <code> Environments</code>，配置 url</li><li>配置 ssh，确保可以 ssh 远程访问 GitHub，可以使用以下命令测试连接是否成功：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@github.com<br></code></pre></td></tr></table></figure>如果出行以下信息，则说明连接成功：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Hi imaginefish! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.<br></code></pre></td></tr></table></figure></li></ol><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><h3 id="Hexo-配置"><a href="#Hexo-配置" class="headerlink" title="Hexo 配置"></a>Hexo 配置</h3><p>Hexo 的配置文件在 <code>blog</code> 目录下，名为 <code>_config.yml</code></p><ul><li>修改语言为中文简体<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br></code></pre></td></tr></table></figure></li><li>修改时区<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br></code></pre></td></tr></table></figure></li><li>修改博客网址，如果不配置会出现文件路径引用错误问题，导致 js、css、图片无法加载<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">url:</span> <span class="hljs-string">https://imaginefish.github.io/blog</span><br></code></pre></td></tr></table></figure></li><li>修改 hexo 部署方式，推送至 Github 仓库的 gh-pages 分支，实现博客部署<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:imaginefish/blog.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Icarus-配置"><a href="#Icarus-配置" class="headerlink" title="Icarus 配置"></a>Icarus 配置</h3><p>Icarus 的配置文件在 <code>blog</code> 目录下，名为 <code>_config.icarus.yml</code></p><ul><li>该主题导航栏无法跟随 Hexo 语言本地化，需要手动修改配置文件<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">menu:</span><br>    <span class="hljs-string">主页:</span> <span class="hljs-string">/</span><br>    <span class="hljs-string">归档:</span> <span class="hljs-string">/archives</span><br>    <span class="hljs-string">分类:</span> <span class="hljs-string">/categories</span><br>    <span class="hljs-string">标签:</span> <span class="hljs-string">/tags</span><br>    <span class="hljs-string">关于:</span> <span class="hljs-string">/about</span><br></code></pre></td></tr></table></figure></li><li>设置博主邮箱链接<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">Email:</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-envelope</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">mailto:imaginefishes@outlook.com</span><br></code></pre></td></tr></table></figure></li><li>修改 <code>sidebar</code> 配置，使 toc 随文章下拉滚动<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">sidebar:</span><br>    <span class="hljs-attr">left:</span><br>        <span class="hljs-attr">sticky:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li>用户访问量统计<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">busuanzi:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li>布局配置文件<br>布局配置文件遵循着与主题配置文件相同的格式和定义。 <code>_config.post.yml</code> 中的配置对所有文章生效，而 <code>_config.page.yml</code> 中的配置对所有自定义页面生效。 这两个文件将覆盖主题配置文件中的配置。<br>例如，可以在 <code>_config.post.yml</code> 中把所有文章变为两栏布局：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">widgets:</span><br>    <span class="hljs-bullet">-</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">toc</span><br>        <span class="hljs-attr">position:</span> <span class="hljs-string">left</span><br>        <span class="hljs-attr">index:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">collapsed:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">depth:</span> <span class="hljs-number">3</span><br>    <span class="hljs-bullet">-</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">recent_posts</span><br>        <span class="hljs-attr">position:</span> <span class="hljs-string">left</span><br>    <span class="hljs-bullet">-</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">categories</span><br>        <span class="hljs-attr">position:</span> <span class="hljs-string">left</span><br>    <span class="hljs-bullet">-</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">tags</span><br>        <span class="hljs-attr">position:</span> <span class="hljs-string">left</span><br>        <span class="hljs-attr">order_by:</span> <span class="hljs-string">name</span><br>        <span class="hljs-attr">amount:</span> <br>        <span class="hljs-attr">show_count:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>在 <code>_config.icarus.yml</code> 中把其他页面仍保持三栏布局：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span><br>    <span class="hljs-attr">position:</span> <span class="hljs-string">right</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">recent_posts</span><br><span class="hljs-bullet">-</span><br>    <span class="hljs-attr">position:</span> <span class="hljs-string">right</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">categories</span><br><span class="hljs-bullet">-</span><br>    <span class="hljs-attr">position:</span> <span class="hljs-string">left</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">archives</span><br><span class="hljs-bullet">-</span><br>    <span class="hljs-attr">position:</span> <span class="hljs-string">right</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">tags</span><br>    <span class="hljs-attr">order_by:</span> <span class="hljs-string">name</span><br>    <span class="hljs-attr">amount:</span> <br>    <span class="hljs-attr">show_count:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>以下给出个人的完整 <code>_config.icarus.yml</code> 配置：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-number">5.1</span><span class="hljs-number">.0</span><br><span class="hljs-attr">variant:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">logo:</span> <span class="hljs-string">/img/logo.svg</span><br><span class="hljs-attr">head:</span><br>    <span class="hljs-attr">favicon:</span> <span class="hljs-string">/img/favicon.svg</span><br>    <span class="hljs-attr">manifest:</span><br>        <span class="hljs-attr">name:</span><br>        <span class="hljs-attr">short_name:</span> <br>        <span class="hljs-attr">start_url:</span> <br>        <span class="hljs-attr">theme_color:</span> <br>        <span class="hljs-attr">background_color:</span> <br>        <span class="hljs-attr">display:</span> <span class="hljs-string">standalone</span><br>        <span class="hljs-attr">icons:</span><br>            <span class="hljs-bullet">-</span><br>                <span class="hljs-attr">src:</span> <span class="hljs-string">&#x27;&#x27;</span><br>                <span class="hljs-attr">sizes:</span> <span class="hljs-string">&#x27;&#x27;</span><br>                <span class="hljs-attr">type:</span> <br>    <span class="hljs-attr">structured_data:</span><br>        <span class="hljs-attr">title:</span> <span class="hljs-string">梦鱼乡</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">个人博客</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">https://github.com/imaginefish/blog</span><br>        <span class="hljs-attr">author:</span> <span class="hljs-string">梦鱼</span><br>        <span class="hljs-attr">publisher:</span> <br>        <span class="hljs-attr">publisher_logo:</span> <br>        <span class="hljs-attr">image:</span> <br>    <span class="hljs-attr">meta:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-attr">rss:</span> <span class="hljs-string">/atom.xml</span><br><span class="hljs-attr">navbar:</span><br>    <span class="hljs-attr">menu:</span><br>        <span class="hljs-string">主页:</span> <span class="hljs-string">/</span><br>        <span class="hljs-string">归档:</span> <span class="hljs-string">/archives</span><br>        <span class="hljs-string">分类:</span> <span class="hljs-string">/categories</span><br>        <span class="hljs-string">标签:</span> <span class="hljs-string">/tags</span><br>        <span class="hljs-string">关于:</span> <span class="hljs-string">/about</span><br>    <span class="hljs-attr">links:</span><br>        <span class="hljs-attr">GitHub:</span><br>            <span class="hljs-attr">icon:</span> <span class="hljs-string">fab</span> <span class="hljs-string">fa-github</span><br>            <span class="hljs-attr">url:</span> <span class="hljs-string">https://github.com/imaginefish/blog</span><br><span class="hljs-attr">footer:</span><br>    <span class="hljs-attr">links:</span><br>        <span class="hljs-attr">Creative Commons:</span><br>            <span class="hljs-attr">icon:</span> <span class="hljs-string">fab</span> <span class="hljs-string">fa-creative-commons</span><br>            <span class="hljs-attr">url:</span> <span class="hljs-string">https://creativecommons.org/</span><br>        <span class="hljs-attr">Attribution 4.0 International:</span><br>            <span class="hljs-attr">icon:</span> <span class="hljs-string">fab</span> <span class="hljs-string">fa-creative-commons-by</span><br>            <span class="hljs-attr">url:</span> <span class="hljs-string">https://creativecommons.org/licenses/by/4.0/</span><br>        <span class="hljs-attr">Download on GitHub:</span><br>            <span class="hljs-attr">icon:</span> <span class="hljs-string">fab</span> <span class="hljs-string">fa-github</span><br>            <span class="hljs-attr">url:</span> <span class="hljs-string">https://github.com/ppoffice/hexo-theme-icarus</span><br><span class="hljs-attr">article:</span><br>    <span class="hljs-attr">highlight:</span><br>        <span class="hljs-attr">theme:</span> <span class="hljs-string">atom-one-light</span><br>        <span class="hljs-attr">clipboard:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">fold:</span> <span class="hljs-string">unfolded</span><br>    <span class="hljs-attr">readtime:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">update_time:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">licenses:</span><br>        <span class="hljs-attr">Creative Commons:</span><br>            <span class="hljs-attr">icon:</span> <span class="hljs-string">fab</span> <span class="hljs-string">fa-creative-commons</span><br>            <span class="hljs-attr">url:</span> <span class="hljs-string">https://creativecommons.org/</span><br>        <span class="hljs-attr">Attribution:</span><br>            <span class="hljs-attr">icon:</span> <span class="hljs-string">fab</span> <span class="hljs-string">fa-creative-commons-by</span><br>            <span class="hljs-attr">url:</span> <span class="hljs-string">https://creativecommons.org/licenses/by/4.0/</span><br>        <span class="hljs-attr">Noncommercial:</span><br>            <span class="hljs-attr">icon:</span> <span class="hljs-string">fab</span> <span class="hljs-string">fa-creative-commons-nc</span><br>            <span class="hljs-attr">url:</span> <span class="hljs-string">https://creativecommons.org/licenses/by-nc/4.0/</span><br><span class="hljs-attr">search:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">insight</span><br>    <span class="hljs-attr">index_pages:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">sidebar:</span><br>    <span class="hljs-attr">left:</span><br>        <span class="hljs-attr">sticky:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">right:</span><br>        <span class="hljs-attr">sticky:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">widgets:</span><br>    <span class="hljs-bullet">-</span><br>        <span class="hljs-attr">position:</span> <span class="hljs-string">left</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">profile</span><br>        <span class="hljs-attr">author:</span> <span class="hljs-string">梦鱼</span><br>        <span class="hljs-attr">author_title:</span> <span class="hljs-string">大数据开发工程师</span><br>        <span class="hljs-attr">location:</span> <span class="hljs-string">中国.上海</span><br>        <span class="hljs-attr">avatar:</span> <span class="hljs-string">/img/avatar.jpg</span><br>        <span class="hljs-attr">avatar_rounded:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">gravatar:</span> <br>        <span class="hljs-attr">follow_link:</span> <span class="hljs-string">https://github.com/imaginefishes</span><br>        <span class="hljs-attr">social_links:</span><br>            <span class="hljs-attr">Github:</span><br>                <span class="hljs-attr">icon:</span> <span class="hljs-string">fab</span> <span class="hljs-string">fa-github</span><br>                <span class="hljs-attr">url:</span> <span class="hljs-string">https://github.com/imaginefishes</span><br>            <span class="hljs-attr">Email:</span><br>                <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-envelope</span><br>                <span class="hljs-attr">url:</span> <span class="hljs-string">mailto:imaginefishes@outlook.com</span><br>            <span class="hljs-attr">RSS:</span><br>                <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-rss</span><br>                <span class="hljs-attr">url:</span> <span class="hljs-string">/atom.xml</span><br>    <span class="hljs-bullet">-</span><br>        <span class="hljs-attr">position:</span> <span class="hljs-string">left</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">toc</span><br>        <span class="hljs-attr">index:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">collapsed:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">depth:</span> <span class="hljs-number">3</span><br>    <span class="hljs-bullet">-</span><br>        <span class="hljs-attr">position:</span> <span class="hljs-string">left</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">links</span><br>        <span class="hljs-attr">links:</span><br>            <span class="hljs-attr">Hexo:</span> <span class="hljs-string">https://hexo.io</span><br>            <span class="hljs-attr">Icarus:</span> <span class="hljs-string">https://ppoffice.github.io/hexo-theme-icarus</span><br>    <span class="hljs-bullet">-</span><br>        <span class="hljs-attr">position:</span> <span class="hljs-string">right</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">recent_posts</span><br>    <span class="hljs-bullet">-</span><br>        <span class="hljs-attr">position:</span> <span class="hljs-string">right</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">categories</span><br>    <span class="hljs-bullet">-</span><br>        <span class="hljs-attr">position:</span> <span class="hljs-string">left</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">archives</span><br>    <span class="hljs-bullet">-</span><br>        <span class="hljs-attr">position:</span> <span class="hljs-string">right</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">tags</span><br>        <span class="hljs-attr">order_by:</span> <span class="hljs-string">name</span><br>        <span class="hljs-attr">amount:</span> <br>        <span class="hljs-attr">show_count:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">plugins:</span><br>    <span class="hljs-attr">animejs:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">back_to_top:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">busuanzi:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">cookie_consent:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">info</span><br>        <span class="hljs-attr">theme:</span> <span class="hljs-string">edgeless</span><br>        <span class="hljs-attr">static:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">position:</span> <span class="hljs-string">bottom-left</span><br>        <span class="hljs-attr">policyLink:</span> <span class="hljs-string">https://www.cookiesandyou.com/</span><br>    <span class="hljs-attr">gallery:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">katex:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">mathjax:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">outdated_browser:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">progressbar:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">providers:</span><br>    <span class="hljs-attr">cdn:</span> <span class="hljs-string">jsdelivr</span><br>    <span class="hljs-attr">fontcdn:</span> <span class="hljs-string">google</span><br>    <span class="hljs-attr">iconcdn:</span> <span class="hljs-string">fontawesome</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><ul><li>文章图片的引用路径<br>若要插入本地图片，在博客根目录下找到 <code>source</code> 文件夹，在其下创建 <code>img</code> 子目录，将图片放置于此，通过 <code>/img/xxx.jpg</code> 路径引入。</li><li>文章图片如何居中显示<br>该解决方案来源于 <a href="https://github.com/ppoffice/hexo-theme-icarus/issues/386">GitHub Issues</a>。<br>找到主题的安装路径，找到 <code>article.styl</code> 文件，我的路径为 <code>node_modules\hexo-theme-icarus\include\style\article.styl</code>，找到如下位置：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css">&amp;<span class="hljs-selector-class">.article</span><br>       <span class="hljs-selector-class">.article-meta</span>, <span class="hljs-selector-class">.article-tags</span><br>           <span class="hljs-attribute">color</span>: $text-light<br><br>       .article-meta<br>           overflow-x: auto<br>           margin-bottom: .<span class="hljs-number">5rem</span><br><br>       .article-more<br>           @extend .button.is-light<br><br>       .content<br>           word-wrap: break-word<br>           font-size: $article-font-size<br></code></pre></td></tr></table></figure>将 <code>article</code> 部分样式添加如下四行代码：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css">&amp;<span class="hljs-selector-class">.article</span><br>       <span class="hljs-selector-class">.article-meta</span>, <span class="hljs-selector-class">.article-tags</span><br>           <span class="hljs-attribute">color</span>: $text-light<br><br>       .article-meta<br>           overflow-x: auto<br>           margin-bottom: .<span class="hljs-number">5rem</span><br><br>       .article-more<br>           @extend .button.is-light<br><br>       .content<br>           word-wrap: break-word<br>           font-size: $article-font-size<br>       <br>           a<br>               img<br>                   margin: auto<br>                   display: block<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;先决条件&quot;&gt;&lt;a href=&quot;#先决条件&quot; class=&quot;headerlink&quot; title=&quot;先决条件&quot;&gt;&lt;/a&gt;先决条件&lt;/h2&gt;&lt;p&gt;需要先安装以下程序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt;</summary>
    
    
    
    <category term="个人博客" scheme="https://imaginefish.github.io/blog/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Hexo" scheme="https://imaginefish.github.io/blog/tags/Hexo/"/>
    
    <category term="Icarus" scheme="https://imaginefish.github.io/blog/tags/Icarus/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://imaginefish.github.io/blog/2022/09/02/hello-world/"/>
    <id>https://imaginefish.github.io/blog/2022/09/02/hello-world/</id>
    <published>2022-09-01T23:20:20.000Z</published>
    <updated>2022-09-05T10:45:06.569Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="个人博客" scheme="https://imaginefish.github.io/blog/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Hexo" scheme="https://imaginefish.github.io/blog/tags/Hexo/"/>
    
    <category term="Icarus" scheme="https://imaginefish.github.io/blog/tags/Icarus/"/>
    
  </entry>
  
</feed>
